// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  firstName     String
  lastName      String
  email         String        @unique
  passwordHash  String
  lmsUserId     Int?          @unique
  contextRoles  ContextRole[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Message Message[]
  ChatRoomParticipant ChatRoomParticipant[]
  profileImageUrl String? // <- URL or object path in MinIO

  tutor Tutor?

  Session Session[]
  queueEntries QueueEntry[]
}

enum RoleKey {
  SITE_ADMIN
  SITE_USER
}

model Role {
  id           Int           @id @default(autoincrement())
  roleKey      RoleKey       @unique
  contextRoles ContextRole[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model ContextRole {
  id        Int      @id @default(autoincrement())
  contextId String?
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  roleId    Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatRoom {
  id            Int                    @id @default(autoincrement())
  name          String
  isPrivate     Boolean                @default(false)
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  roomCount     Int                    @default(0)
  messages      Message[]
  participants  ChatRoomParticipant[]
  sessions      Session[]
}

model Message {
  id          Int       @id @default(autoincrement())
  content     String
  sentAt      DateTime  @default(now())

  sender      User      @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId    Int

  chatRoom    ChatRoom? @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId  Int?

  session     Session?  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId   Int?

  @@index([chatRoomId, sentAt])
  @@index([sessionId, sentAt])
}

model ChatRoomParticipant {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int

  chatRoom   ChatRoom  @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId Int

  joinedAt   DateTime  @default(now())

  @@unique([userId, chatRoomId]) // Prevent duplicate entries
}

model Tutor {
  id          Int             @id @default(autoincrement())
  user        User            @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  tutorId     Int  @unique
  documentImageUrl String? // <- Optional image stored in MinIO
  available Boolean  @default(true) // true means available, false means unavailable
  online   Boolean @default(false)

  Session Session[]
}

model Session {
  id            Int            @id @default(autoincrement())
  student       User           @relation(fields: [studentId], references: [id], onDelete: Cascade)
  tutor         Tutor          @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  studentId     Int      
  tutorId       Int
  subject       String?
  urgency       Urgency?
  description   String?
  estimatedTime Int?
  startTime     DateTime       @default(now())
  endTime       DateTime?
  totalTime     Int?
  name          String
  messages      Message[]
  status        SessionStatus  @default(ACTIVE)
  chatRoom      ChatRoom?      @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId    Int?

  @@unique([studentId, tutorId, status], name: "unique_active_session")
}

enum SessionStatus {
  ACTIVE
  ENDED
  CANCELLED
}

enum Urgency {
  HIGH
  MEDIUM
  LOW
}

model QueueEntry {
  id            Int         @id @default(autoincrement())
  student       User        @relation(fields: [studentId], references: [id])
  studentId     Int
  subject       String?     // Make optional initially
  urgency       Urgency     @default(MEDIUM)
  description   String?     // Make optional initially
  estimatedTime Int?        // Make optional initially
  position      Int?        // Make optional initially
  createdAt     DateTime    @default(now())
  status        QueueStatus @default(WAITING)
  studentName   String?     // Make optional initially

  @@index([status, position])
  @@index([studentId, status])
}

enum QueueStatus {
  WAITING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
